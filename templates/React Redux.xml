<templateSet group="React Redux">
  <template name="dis" value="dispatch($END$)" description="dispatch()" toReformat="true" toShortenFQNames="true">
    <context>
      <option name="JS_STATEMENT" value="true" />
    </context>
  </template>
  <template name="used" value="const dispatch = useDispatch();" description="useDispatch" toReformat="true" toShortenFQNames="true">
    <context>
      <option name="JS_EXPRESSION" value="true" />
      <option name="JS_STATEMENT" value="true" />
    </context>
  </template>
  <template name="usesel" value="const $1$ = useSelector($2$);" description="useSelector" toReformat="true" toShortenFQNames="true">
    <variable name="1" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="2" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="JS_EXPRESSION" value="true" />
      <option name="JS_STATEMENT" value="true" />
    </context>
  </template>
  <template name="esel" value="export const $selectorName$ = (state: RootState) =&gt; state.$selector$" description="export reduxSelector" toReformat="true" toShortenFQNames="true">
    <variable name="selectorName" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="selector" expression="complete()" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="JS_STATEMENT" value="true" />
    </context>
  </template>
  <template name="sel" value="const $selectorName$ = (state: RootState) =&gt; state.$selector$" description="reduxSelector" toReformat="true" toShortenFQNames="true">
    <variable name="selectorName" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="selector" expression="complete()" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="JS_STATEMENT" value="true" />
    </context>
  </template>
</templateSet>