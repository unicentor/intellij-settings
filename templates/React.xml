<templateSet group="React">
  <template name="pp" value="$1$={$1$}" description="props" toReformat="false" toShortenFQNames="true">
    <variable name="1" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="JAVA_SCRIPT" value="true" />
    </context>
  </template>
  <template name="con" value="constructor(props) {&#10; super(props);&#10; $END$&#10;}&#10;" description="Adds a default constructor for the class that contains props as arguments" toReformat="true" toShortenFQNames="true">
    <context>
      <option name="JS_CLASS" value="true" />
    </context>
  </template>
  <template name="rdc" value="import React from 'react';&#10;&#10;export const $TM_FILENAME_BASE$ = ($props$) =&gt; ($END$);&#10;" description="React dumb component" toReformat="true" toShortenFQNames="true">
    <variable name="TM_FILENAME_BASE" expression="capitalize(camelCase(fileNameWithoutExtension()))" defaultValue="&quot;&quot;" alwaysStopAt="false" />
    <variable name="props" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="JS_STATEMENT" value="true" />
    </context>
  </template>
  <template name="uses" value="const [$state$, set$setState$] = useState($initState$);$END$" description="useState" toReformat="true" toShortenFQNames="true">
    <variable name="state" expression="" defaultValue="&quot;state&quot;" alwaysStopAt="true" />
    <variable name="setState" expression="capitalize(state)" defaultValue="" alwaysStopAt="false" />
    <variable name="initState" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="JS_EXPRESSION" value="true" />
      <option name="JS_STATEMENT" value="true" />
    </context>
  </template>
  <template name="usee" value="useEffect(() =&gt; {&#10;  $effect$&#10;}, []);" description="useEffect" toReformat="true" toShortenFQNames="true">
    <variable name="effect" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="JS_EXPRESSION" value="true" />
      <option name="JS_STATEMENT" value="true" />
    </context>
  </template>
  <template name="useco" value="const $context$ = useContext($contextValue$);" description="useContext" toReformat="true" toShortenFQNames="true">
    <variable name="context" expression="" defaultValue="&quot;context&quot;" alwaysStopAt="true" />
    <variable name="contextValue" expression="" defaultValue="&quot;contextValue&quot;" alwaysStopAt="true" />
    <context>
      <option name="JS_EXPRESSION" value="true" />
      <option name="JS_STATEMENT" value="true" />
    </context>
  </template>
  <template name="usec" value="useCallback(&#10;  () =&gt; {&#10;    $callback$&#10;  },&#10;  [],&#10;)" description="useCallback" toReformat="true" toShortenFQNames="true">
    <variable name="callback" expression="" defaultValue="&quot;callback&quot;" alwaysStopAt="true" />
    <context>
      <option name="JS_EXPRESSION" value="true" />
      <option name="JS_STATEMENT" value="true" />
    </context>
  </template>
  <template name="usered" value="const [state, dispatch] = useReducer($reducer$, $initialState$, $init$);$END$" description="useReducer" toReformat="true" toShortenFQNames="true">
    <variable name="reducer" expression="" defaultValue="&quot;reducer&quot;" alwaysStopAt="true" />
    <variable name="initialState" expression="" defaultValue="&quot;initialState&quot;" alwaysStopAt="true" />
    <variable name="init" expression="" defaultValue="&quot;init&quot;" alwaysStopAt="true" />
    <context>
      <option name="JS_EXPRESSION" value="true" />
      <option name="JS_STATEMENT" value="true" />
    </context>
  </template>
  <template name="usem" value="import { useMemo } from 'react';&#10;&#10;useMemo(() =&gt; $function$, [])" description="useMemo" toReformat="true" toShortenFQNames="true">
    <variable name="function" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="JS_EXPRESSION" value="true" />
      <option name="JS_STATEMENT" value="true" />
    </context>
  </template>
  <template name="user" value="const $ref$ = useRef(null);" description="useRef" toReformat="true" toShortenFQNames="true">
    <variable name="ref" expression="" defaultValue="&quot;ref&quot;" alwaysStopAt="true" />
    <context>
      <option name="JS_EXPRESSION" value="true" />
      <option name="JS_STATEMENT" value="true" />
    </context>
  </template>
  <template name="usedb" value="useDebugValue($value$);" description="useDebugValue" toReformat="true" toShortenFQNames="true">
    <variable name="value" expression="" defaultValue="&quot;value&quot;" alwaysStopAt="true" />
    <context>
      <option name="JS_EXPRESSION" value="true" />
      <option name="JS_STATEMENT" value="true" />
    </context>
  </template>
  <template name="rctx" value="const $contextName$ = React.createContext();$END$" description="Creates a context" toReformat="true" toShortenFQNames="true">
    <variable name="contextName" expression="" defaultValue="&quot;contextName&quot;" alwaysStopAt="true" />
    <context>
      <option name="JS_STATEMENT" value="true" />
    </context>
  </template>
  <template name="rctn" value="import React from 'react';&#10;import { $Component$ } from './$Component$'&#10;&#10;export const $Component$Container = (props: {}) =&gt; {&#10;  return (&#10;    &lt;$Component$ {...props} /&gt;&#10;  );&#10;}" description="Import + Export a React container" toReformat="true" toShortenFQNames="true">
    <variable name="Component" expression="&quot;Component&quot;" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="JS_STATEMENT" value="true" />
    </context>
  </template>
  <template name="ctn" value="export const $Component$Container = (props: {}) =&gt; {&#10;  return (&#10;    &lt;$Component$ {...props} /&gt;&#10;  );&#10;}" description="Export a React container" toReformat="true" toShortenFQNames="true">
    <variable name="Component" expression="&quot;Component&quot;" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="JS_STATEMENT" value="true" />
    </context>
  </template>
  <template name="dc" value="export const $TM_FILENAME_BASE$ = ($props$) =&gt; ($END$);&#10;" description="React dumb component" toReformat="true" toShortenFQNames="true">
    <variable name="TM_FILENAME_BASE" expression="capitalize(camelCase(fileNameWithoutExtension()))" defaultValue="&quot;&quot;" alwaysStopAt="false" />
    <variable name="props" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="JS_STATEMENT" value="true" />
    </context>
  </template>
  <template name="dis" value="dispatch($END$)" description="dispatch()" toReformat="true" toShortenFQNames="true">
    <context>
      <option name="JS_STATEMENT" value="true" />
    </context>
  </template>
  <template name="useer" value="useEffect(() =&gt; {&#10;  $effect$&#10;&#10;  return () =&gt; {&#10;    $unmount$&#10;  };&#10;}, []);" description="useEffect with return" toReformat="true" toShortenFQNames="true">
    <variable name="effect" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="unmount" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="JS_EXPRESSION" value="true" />
      <option name="JS_STATEMENT" value="true" />
    </context>
  </template>
  <template name="useih" value="useImperativeHandle(&#10;  $ref$,&#10;  () =&gt; {&#10;    $handler$&#10;  },&#10;  [$input$],&#10;);&#10;$END$" description="useImperativeHandle" toReformat="true" toShortenFQNames="true">
    <variable name="ref" expression="" defaultValue="&quot;ref&quot;" alwaysStopAt="true" />
    <variable name="handler" expression="" defaultValue="&quot;handler&quot;" alwaysStopAt="true" />
    <variable name="input" expression="" defaultValue="&quot;input&quot;" alwaysStopAt="true" />
    <context>
      <option name="JS_EXPRESSION" value="true" />
      <option name="JS_STATEMENT" value="true" />
    </context>
  </template>
  <template name="usele" value="useLayoutEffect(() =&gt; {&#10;  return () =&gt; {&#10;    $effect$&#10;  },&#10;  [$input$]&#10;});&#10;$END$" description="useLayoutEffect" toReformat="true" toShortenFQNames="true">
    <variable name="effect" expression="" defaultValue="&quot;effect&quot;" alwaysStopAt="true" />
    <variable name="input" expression="" defaultValue="&quot;input&quot;" alwaysStopAt="true" />
    <context>
      <option name="JS_EXPRESSION" value="true" />
      <option name="JS_STATEMENT" value="true" />
    </context>
  </template>
  <template name="used" value="const dispatch = useDispatch();" description="useDispatch" toReformat="true" toShortenFQNames="true">
    <context>
      <option name="JS_EXPRESSION" value="true" />
      <option name="JS_STATEMENT" value="true" />
    </context>
  </template>
  <template name="usesel" value="const $1$ = useSelector($2$);" description="useSelector" toReformat="true" toShortenFQNames="true">
    <variable name="1" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="2" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="JS_EXPRESSION" value="true" />
      <option name="JS_STATEMENT" value="true" />
    </context>
  </template>
</templateSet>