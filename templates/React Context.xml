<templateSet group="React Context">
  <template name="ctx" value="import { useState } from 'react';&#10;import constate from 'constate';&#10;&#10;export const useContext$ContextName$ = () =&gt; {&#10;  const [$state$, set$State$] = useState();&#10;  &#10;  return { $state$, set$State$ };&#10;};&#10;&#10;const [$ContextName$Provider, use$State$, useSet$State$] = constate(&#10;  useContext$ContextName$,&#10;  (value) =&gt; value.$state$,&#10;  (value) =&gt; value.set$State$&#10;);&#10;&#10;export { $ContextName$Provider, use$State$, useSet$State$ };" description="constate" toReformat="false" toShortenFQNames="true">
    <variable name="ContextName" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="state" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="State" expression="capitalize(state)" defaultValue="" alwaysStopAt="false" />
    <context>
      <option name="JS_EXPRESSION" value="true" />
      <option name="JS_STATEMENT" value="true" />
    </context>
  </template>
  <template name="rcctx" value="const $contextName$ = React.createContext();$END$" description="Creates a context" toReformat="true" toShortenFQNames="true">
    <variable name="contextName" expression="" defaultValue="&quot;contextName&quot;" alwaysStopAt="true" />
    <context>
      <option name="JS_STATEMENT" value="true" />
    </context>
  </template>
  <template name="ectx" value="import { useState } from 'react';&#10;import constate from 'constate';&#10;&#10;const [$setState$Provider, use$setState$, useSet$setState$] = constate(&#10;  () =&gt; {&#10;    const [$state$, set$setState$] = useState();&#10;&#10;    return {&#10;      $state$,&#10;      set$setState$,&#10;    };&#10;  },&#10;  (value) =&gt; value.$state$,&#10;  (value) =&gt; value.$setState$,&#10;  (value) =&gt; value.useSet$setState$,&#10;);&#10;&#10;export {&#10;  $setState$Provider,&#10;  use$setState$,&#10;};&#10;" description="export constate template" toReformat="false" toShortenFQNames="true">
    <variable name="state" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="setState" expression="capitalize(state)" defaultValue="" alwaysStopAt="false" />
    <context>
      <option name="JS_STATEMENT" value="true" />
    </context>
  </template>
</templateSet>