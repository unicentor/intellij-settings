<templateSet group="React Fluent UI">
  <template name="fui-classNamesConst" value="const classNames = getClassNames(styles, {&#10;  className,&#10;  // Other style props&#10;});" description="Generates base for getting your classNames from the styles file." toReformat="false" toShortenFQNames="true">
    <context>
      <option name="JS_STATEMENT" value="true" />
    </context>
  </template>
  <template name="fui-classNamesFunction" value="import { classNamesFunction } from '@uifabric/utilities';&#10;import {&#10;  $ComponentName$StyleProps,&#10;  $ComponentName$Styles,&#10;} from  './$ComponentName$.types';&#10;&#10;const getClassNames = classNamesFunction&lt;&#10;  $ComponentName$StyleProps,&#10;  $ComponentName$Styles&#10;&gt;();&#10;&#10;/**&#10; * $ComponentName$ with no default styles.&#10; * [Use the `styles` API to add your own styles.](https://github.com/OfficeDev/office-ui-fabric-react/wiki/Component-Styling)&#10;*/" description="Generates base functions for enabling themes and styles API" toReformat="false" toShortenFQNames="true">
    <variable name="ComponentName" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="JS_STATEMENT" value="true" />
    </context>
  </template>
  <template name="fui-sc" value="import { styled } from '@uifabric/utilities';&#10;import { &#10;  $ComponentName$Props,&#10;} from './$ComponentName$.types';&#10;import { get$ComponentName$Styles } from './$ComponentName$.styles';&#10;&#10;/**&#10; * $ComponentName$&#10; */&#10;export const $ComponentName$ = styled&lt;&#10;  $ComponentName$Props,&#10;  $ComponentName$StyleProps,&#10;  $ComponentName$Styles&#10;&gt;($ComponentName$Base, get$ComponentName$Styles, undefined, {&#10;  scope: '$ComponentName$',&#10;});&#10;" description="Generates styled component file for making variants of Component Base.&quot;" toReformat="false" toShortenFQNames="true">
    <variable name="ComponentName" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="JS_STATEMENT" value="true" />
    </context>
  </template>
  <template name="fui-componentTypes" value="import { IStyle } from '@uifabric/styling';&#10;import { IStyleFunctionOrObject } from '@uifabric/utilities';&#10;&#10;export interface $ComponentName$Props {&#10;  /**&#10;   * Additional class name to provide on the root element, in addition to the slate-$ComponentName$ class.&#10;   */&#10;  className?: string;&#10;  &#10;  /**&#10;   * Call to provide customized styling that will layer on top of the variant rules.&#10;   */&#10;  styles?: IStyleFunctionOrObject&lt;$ComponentName$StyleProps, $ComponentName$Styles&gt;;&#10;&#10;  // Insert $ComponentName$ props below&#10;}&#10;&#10;export interface $ComponentName$StyleProps {&#10;  /**&#10;   * Accept custom classNames&#10;   */&#10;  className?: string;&#10;&#10;  // Insert $ComponentName$ style props below&#10;}&#10;&#10;export interface $ComponentName$Styles {&#10;  /**&#10;   * Style for the root element.&#10;   */&#10;  root?: IStyle;&#10;&#10;  // Insert $ComponentName$ classNames below&#10;}&#10;" description="Scaffolds a Component.types.ts file." toReformat="false" toShortenFQNames="true">
    <variable name="ComponentName" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="JS_STATEMENT" value="true" />
    </context>
  </template>
  <template name="fui-st" value="import { $ComponentName$StyleProps, $ComponentName$Styles } from './$ComponentName$.types';&#10;&#10;const classNames = {&#10;  root: '$app$-$ComponentName$',&#10;};&#10;&#10;export const get$ComponentName$Styles = ({&#10;  className,&#10;}: $ComponentName$StyleProps): $ComponentName$Styles =&gt; {&#10;  return {&#10;    root: [&#10;      classNames.root,&#10;      {&#10;        // Insert css properties&#10;      },&#10;      className,&#10;    ],&#10;  };&#10;};&#10;" description="Scaffolds a Component.styles.ts file." toReformat="false" toShortenFQNames="true">
    <variable name="app" expression="" defaultValue="&quot;slate&quot;" alwaysStopAt="true" />
    <variable name="ComponentName" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="JS_STATEMENT" value="true" />
    </context>
  </template>
</templateSet>