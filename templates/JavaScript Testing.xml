<templateSet group="JavaScript Testing">
  <template name="desc" value="describe('$1$', () =&gt; {&#10;  $2$&#10;});" description="creates a describe block" toReformat="true" toShortenFQNames="true">
    <variable name="1" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="2" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="JS_STATEMENT" value="true" />
    </context>
  </template>
  <template name="be" value="beforeEach(() =&gt; {&#10;  $END$&#10;});" description="beforeEach function is called once before each spec" toReformat="true" toShortenFQNames="true">
    <context>
      <option name="JS_STATEMENT" value="true" />
    </context>
  </template>
  <template name="ae" value="afterEach(() =&gt; {&#10;  $0$&#10;});" description="afterEach function is called once after each spec" toReformat="true" toShortenFQNames="true">
    <variable name="0" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="JS_STATEMENT" value="true" />
    </context>
  </template>
  <template name="af" value="after(() =&gt; {&#10;  $END$&#10;});" description="Inserts after() block" toReformat="true" toShortenFQNames="true">
    <context />
  </template>
  <template name="bf" value="before(() =&gt; {&#10;  $END$&#10;});" description="Inserts before() block" toReformat="true" toShortenFQNames="true">
    <context />
  </template>
  <template name="aa" value="afterAll(() =&gt; {&#10;  $0$&#10;});" description="afterAll function is called once after all specs" toReformat="false" toShortenFQNames="true">
    <variable name="0" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="JS_STATEMENT" value="true" />
    </context>
  </template>
  <template name="ba" value="beforeAll(() =&gt; {&#10;  $0$&#10;});" description="beforeAll function is called once before all specs" toReformat="false" toShortenFQNames="true">
    <variable name="0" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="JS_STATEMENT" value="true" />
    </context>
  </template>
  <template name="exp" value="expect($0$)" description="expect actual value" toReformat="true" toShortenFQNames="true">
    <variable name="0" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="JS_STATEMENT" value="true" />
    </context>
  </template>
  <template name="expas" value="expect.assertions($0$);" description="expects the test to make the indicated number of assertions (useful for async)" toReformat="true" toShortenFQNames="true">
    <variable name="0" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="JS_STATEMENT" value="true" />
    </context>
  </template>
  <template name="expha" value="expect.hasAssertions();" description="expects the test to make at least one assertion (useful for async)" toReformat="true" toShortenFQNames="true">
    <context>
      <option name="JS_STATEMENT" value="true" />
    </context>
  </template>
  <template name="exprj" value="expect($1$).rejects$0$" description="expect promise rejects to" toReformat="true" toShortenFQNames="true">
    <variable name="1" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="0" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="JS_STATEMENT" value="true" />
    </context>
  </template>
  <template name="expr" value="expect($1$).resolves$0$" description="expect promise resolves to" toReformat="true" toShortenFQNames="true">
    <variable name="1" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="0" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="JS_STATEMENT" value="true" />
    </context>
  </template>
  <template name="ita" value="it('$1$$2$', async () =&gt; {&#10;  $0$&#10;});" description="creates an it block with async callback function" toReformat="true" toShortenFQNames="true">
    <variable name="1" expression="&quot;should &quot;" defaultValue="" alwaysStopAt="true" />
    <variable name="2" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="0" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="JS_STATEMENT" value="true" />
    </context>
  </template>
  <template name="jfn" value="jest.fn($0$)" description="creates jest.fn()" toReformat="true" toShortenFQNames="true">
    <variable name="0" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="JS_STATEMENT" value="true" />
    </context>
  </template>
  <template name="test" value="test('$1$', () =&gt; {&#10;    $0$&#10;});" description="creates a test block" toReformat="true" toShortenFQNames="true">
    <variable name="1" expression="&quot;should &quot;" defaultValue="" alwaysStopAt="true" />
    <variable name="0" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="JS_STATEMENT" value="true" />
    </context>
  </template>
  <template name="tb" value="expect($1$).toBe($0$);" description="expects the first argument to be equal with the second one" toReformat="true" toShortenFQNames="true">
    <variable name="1" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="0" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="JS_STATEMENT" value="true" />
    </context>
  </template>
  <template name="it" value="it('$1$$2$', async () =&gt; {&#10;  $0$&#10;});" description="creates an it block" toReformat="true" toShortenFQNames="true">
    <variable name="1" expression="&quot;when &quot;" defaultValue="" alwaysStopAt="true" />
    <variable name="2" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="0" expression="" defaultValue="" alwaysStopAt="true" />
    <context />
  </template>
</templateSet>